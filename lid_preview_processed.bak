pro lid_preview_processed, profnum, type, inv_type, $
	xran=xran, yran=yran, slope_method=slope_method


@lid_settings.include


if (n_elements(nprofiles) NE 1 || nprofiles LE 0L) then $
	message, 'No data. lid_data_read must be called first.'


xsiz = 640
ysiz = 480
wnum = 2

if (n_elements(profnum) NE 1) then profnum = 0
if (n_elements(yran) NE 2) then yran = [ymin, ymax]

pinfo = profinfo[profnum]
prof  = profile[profnum]

_p_depol_   = 0
_p_fern_al_ = 1
_p_digi_al_ = 2
_p_fern_br_ = 3
_p_digi_br_ = 4

type = lid_type_select(type, [0,0,0,0,0,1,0,1,0,1])
if (type EQ _totdep_) then begin
	plot_type = _p_depol_
endif else if (type EQ _extinc_) then begin
	plot_type = (inv_type EQ _fern_ ? _p_fern_al_ : _p_digi_al_)
endif else begin
	plot_type = (inv_type EQ _fern_ ? _p_fern_br_ : _p_digi_br_)
endelse

slope_method = (keyword_set(slope_method) $
	&& (type EQ _extinc_ || type EQ _bratio_))

xran0 = [[0.0D,0.2D], [0.0D, 500.0D], [0.0D, 500.0D], $
	[1.0D, 2.0D], [1.0D, 2.0D]]
isdef = [(pinfo.p_idx[1] NE 0L AND pinfo.p_idx[1] GE pinfo.p_idx[0] $
	AND pinfo.p_cal NE 0.0D), $
	(pinfo.f_idx[1] NE 0L AND pinfo.f_idx[1] GE pinfo.f_idx[0] $
	AND pinfo.f_br NE 0.0D AND pinfo.f_lidratio NE 0.0D), $
	(pinfo.f_idx[1] NE 0L AND pinfo.f_idx[1] GE pinfo.f_idx[0] $
	AND pinfo.d_idx[1] NE 0L AND pinfo.d_idx[1] GE pinfo.d_idx[0] $
	AND pinfo.f_br NE 0.0D AND pinfo.d_br NE 0.0D), $
	(pinfo.f_idx[1] NE 0L AND pinfo.f_idx[1] GE pinfo.f_idx[0] $
	AND pinfo.f_br NE 0.0D AND pinfo.f_lidratio NE 0.0D), $
	(pinfo.f_idx[1] NE 0L AND pinfo.f_idx[1] GE pinfo.f_idx[0] $
	AND pinfo.d_idx[1] NE 0L AND pinfo.d_idx[1] GE pinfo.d_idx[0] $
	AND pinfo.f_br NE 0.0D AND pinfo.d_br NE 0.0D)]
title0 = ['Volume depolarization ratio', 'Fernald extinction', $
	'Digirolamo extinction', 'Fernald BR', 'Digirolamo BR']


device, window_state=window_open
if (~isdef[plot_type]) then begin
	if (window_open[wnum]) then wdelete, wnum
	message, 'Some needed information has not been set.', /continue
	return
endif

if (n_elements(xran) NE 2) then xran = xran0[*, plot_type]


case plot_type of
	_p_depol_ : begin
		horln = prof.height[[pinfo.p_idx]]
		verln = 0.0D
		lid_voldepol, pinfo, prof, voldep=var
	end
	_p_fern_al_  : begin
		horln = prof.height[[pinfo.f_idx]]
		verln = 0.0D
		fernald, prof.height, prof.pr2[*,0], prof.mol_beta, $
			pinfo.f_idx, pinfo.f_br - 1.0D, pinfo.f_lidratio, $
			cos_offnadir=pinfo.con, alpha=var
		var *= 1D6
	end
	_p_digi_al_  : begin
		horln = prof.height[[pinfo.f_idx, pinfo.d_idx]]
		verln = 0.0D
		digirolamo, prof.height, prof.pr2[*,0], prof.mol_pr2, $
			prof.mol_beta, pinfo.d_idx, pinfo.d_br-1.0D, $
			pinfo.f_idx, pinfo.f_br-1.0D, cos_offnadir=pinfo.con, $
			alpha=var, ratio=d_lr, tau=tau, ib=ib, $
			iterations=iterations, abort=abort, verbose=0, /debug
		var *= 1D6
		if (abort) then message, 'Non-converging: aborted.', /continue
		print, profnum, tau, ib, d_lr, iterations, $
			format='(%"%4d) Layer AOD: %7.4f, IB: %7.4f - ' $
			+ 'Estimated lidar ratio: %7.2f - %d iterations")'
	end
	_p_fern_br_  : begin
		horln = prof.height[[pinfo.f_idx]]
		verln = 1.0D
		fernald, prof.height, prof.pr2[*,0], prof.mol_beta, $
			pinfo.f_idx, pinfo.f_br - 1.0D, pinfo.f_lidratio, $
			cos_offnadir=pinfo.con, beta=betaaer
		var = 1.0D + betaaer/prof.mol_beta
	end
	_p_digi_br_  : begin
		horln = prof.height[[pinfo.f_idx, pinfo.d_idx]]
		verln = 1.0D
		digirolamo, prof.height, prof.pr2[*,0], prof.mol_pr2, $
			prof.mol_beta, pinfo.d_idx, pinfo.d_br-1.0D, $
			pinfo.f_idx, pinfo.f_br-1.0D, cos_offnadir=pinfo.con, $
			beta=betaaer, ratio=d_lr, tau=tau, ib=ib, $
			iterations=iterations, abort=abort, verbose=0, /debug
		var = 1.0D + betaaer/prof.mol_beta
		if (abort) then message, 'Non-converging: aborted.', /continue
		print, profnum, tau, ib, d_lr, iterations, $
			format='(%"%4d) Layer AOD: %7.4f, IB: %7.4f - ' $
			+ 'Estimated lidar ratio: %7.2f - %d iterations")'
	end
endcase

if (~window_open[wnum]) then window, wnum, xsize=xsiz, ysize=ysiz
wset, wnum
wshow, wnum

maxdata = maxaltitudes-1
if (view EQ _nadir_) then begin
	next_sfc = (pinfo.lsf GE ymin ? pinfo.lsf : _dundef_)
	for i=0, nclouds-1 do if (pinfo.ct_idx[i] GT pinfo.f_idx[0]) then $
		next_sfc = max([next_sfc, prof.height[pinfo.ct_idx[i]]])
	idx = where(prof.height GT next_sfc, cnt)
	if (next_sfc GE ymin && cnt GT 0) then maxdata = idx[cnt-1]
endif

title = string(title0[plot_type], profnum, format='(%"%s (profile %d)")')
plot, var, prof.height, min_value=ymin, xrange=xran, yrange=yran, $
	/xstyle, /ystyle, title=title, ytickformat='(i)', /nodata
oplot, xran, [prof.height[ovl], prof.height[ovl]], color=13
oplot, [verln, verln], yran
if (plot_type EQ _p_depol_) then $
	oplot, [pinfo.p_cal, pinfo.p_cal], yran, color=10
for i=0, n_elements(horln)-1 do oplot, xran, horln[[i,i]], color=10
oplot, var[0:maxdata], prof.height[0:maxdata], color=5
if (maxdata LT maxaltitudes-1) then $
	oplot, var[(maxdata+1):*], prof.height[(maxdata+1):*], color=15

if (slope_method) then begin
	rayleigh, prof.height, beta=prof.mol_beta, cos_offnadir=pinfo.con, $
		tau=taumol, /use_existing_beta
	slope_method, prof.range, prof.pr2[*,0], taumol, prof.mol_beta, $
		alpha=alphaslope, sample=50
	if (type EQ _extinc_) then begin
		oplot, alphaslope*1D6, prof.height, color=2, thick=2
	endif else begin
		oplot, 1.0D + alphaslope/(pinfo.f_lidratio*prof.mol_beta), $
			prof.height, color=2, thick=2
	endelse
endif

end

